generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            Int                    @id @default(autoincrement())
  email         String                 @unique
  password      String
  userName      String                 @unique
  about         String                 @default("")
  skills        Skill[]
  refreshTokens RefreshToken[]
  projects      ProjectCollaborators[]
  likes         ProjectLike[]
}

model Skill {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model RefreshToken {
  id     Int    @id @default(autoincrement())
  token  String @unique @db.VarChar(500)
  userId Int
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId], map: "userIdIndex")
}

model Project {
  id            Int                    @id @default(autoincrement())
  name          String                 @unique
  description   String
  creatorId     Int
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  statusId      Int                    @default(1)
  maxMembers    Int                    @default(5)
  status        status                 @relation(fields: [statusId], references: [id])
  likes         ProjectLike[]
  collaborators ProjectCollaborators[]

  @@index([creatorId], map: "userIdIndex")
  @@index([statusId], map: "statusIdIndex")
}

model ProjectLike {
  id        Int     @id @default(autoincrement())
  userId    Int
  projectId Int
  liked     Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId], map: "userProjectIndex")
  @@index([projectId])
}

model ProjectCollaborators {
  id        Int     @id @default(autoincrement())
  userId    Int
  projectId Int
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@index([userId], map: "userIdIndex")
  @@index([projectId], map: "projectIdIndex")
}

model status {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  projects Project[]
}

model VisitHistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  createdAt DateTime @default(now())

  @@index([projectId], map: "projectIdIndex")
  @@index([userId], map: "userIdIndex")
}

model SearchHistory {
  id          Int      @id @default(autoincrement())
  userId      Int
  searchQuery String
  createdAt   DateTime @default(now())

  @@index([userId], map: "userIdIndex")
}

model userSearchHistory {
  id          Int      @id @default(autoincrement())
  userId      Int
  createdAt   DateTime @default(now())
  searchQuery String

  @@index([userId], map: "userIdIndex")
}

model SkillToUser {
  A Int
  B Int

  @@unique([A, B], map: "_SkillToUser_AB_unique")
  @@index([B], map: "_SkillToUser_B_index")
  @@map("_SkillToUser")
}

model CollaborationRequest {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  response  String?
  createdAt DateTime @default(now())
  status    String   @default("pending")
  message   String

  @@index([projectId], map: "projectIdIndex")
  @@index([userId], map: "userIdIndex")
}
